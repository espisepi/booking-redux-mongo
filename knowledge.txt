
1) create react app
2) install node-sass
3) helloworld sass
4) Levantamos el backend para proceder a crear el frontend
5) Levantamos el frontend del proyecto a replicar

*) Replicamos el frontend de reservas con sass (no redux)
*) Aplicamos Refactoring en el codigo siguiendo plantilla udemy curso (si redux)

6) Añadimos Redux

/// ------------

Poner limite de horas a las tareas

Dibujar las vistas a realizar

Pensar en MVP, en este caso el minimo producto viable consiste en la funcionalidad de reserva,
Una vez que eso nos funcione refactorizamos el codigo
y nos preocupamos de la parte clean code.

Pero primero escribirlo en sucio si es la primera vez que se monta un sistema. Si ya lo monté una vez y lo refactoricé, utilizar el patron ese como base y no hacerlo de nuevo

/// --------------------

https://redux.js.org/style-guide/style-guide#put-as-much-logic-as-possible-in-reducers
https://jkettmann.com/how-to-accidentally-mutate-state-and-why-not-to
https://dev.to/gkhan205/best-scalable-react-app-architecture-2020-9fn
https://reactpatterns.com/
https://www.pluralsight.com/guides/how-to-organize-your-react-+-redux-codebase
https://redux.js.org/faq/code-structure
https://github.com/goldbergyoni/nodebestpractices#1-project-structure-practices
https://medium.com/swlh/protect-your-javascript-applications-from-api-data-401a73c7c80b

// Scalable pattern react
https://saurabhshah23.medium.com/react-js-architecture-features-folder-structure-design-pattern-70b7b9103f22
https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0